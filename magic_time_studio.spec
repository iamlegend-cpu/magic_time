# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['run.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('ui_pyside6', 'ui_pyside6'),
        ('app_core', 'app_core'),
        ('core', 'core'),
        ('models', 'models'),
        ('assets', 'assets'),
        ('whisper_config.env', '.'),
        ('panel_config.json', '.'),
        # ('config.json', '.'),  # Bestaat niet - commentaar uit
        # Lightning data files
        ('pyqt_venv/Lib/site-packages/lightning', 'lightning'),
        ('pyqt_venv/Lib/site-packages/lightning_fabric', 'lightning_fabric'),
        ('pyqt_venv/Lib/site-packages/lightning_utilities', 'lightning_utilities'),
        ('pyqt_venv/Lib/site-packages/pytorch_lightning', 'pytorch_lightning'),
        # SpeechBrain data files
        ('pyqt_venv/Lib/site-packages/speechbrain', 'speechbrain'),
        # WhisperX data files
        ('pyqt_venv/Lib/site-packages/whisperx', 'whisperx'),
    ],
    hiddenimports=[
        'torch',
        'whisperx',
        'whisperx.asr',
        'whisperx.vad',
        'whisperx.alignment',
        'whisperx.diarize',
        'pydub',
        'ffmpeg',
        'protobuf',
        'PySide6',
        'PySide6.QtGui',
        'PySide6.QtWidgets',
        'PySide6.QtSvg',
        'PySide6.QtSvgWidgets',
        'PySide6.QtPrintSupport',
        'PySide6.QtOpenGL',
        'PySide6.QtOpenGLWidgets',
        'PySide6.QtCharts',
        'PySide6.QtDataVisualization',
        'PySide6.QtMultimedia',
        'PySide6.QtMultimediaWidgets',
        'PySide6.QtBluetooth',
        'PySide6.QtDBus',
        'PySide6.QtDesigner',
        'PySide6.QtHelp',
        'PySide6.QtLocation',
        'PySide6.QtMultimedia',
        'PySide6.QtMultimediaWidgets',
        'PySide6.QtNfc',
        'PySide6.QtPositioning',
        'PySide6.QtQml',
        'PySide6.QtQuick',
        'PySide6.QtQuickWidgets',
        'PySide6.QtRemoteObjects',
        'PySide6.QtScxml',
        'PySide6.QtSensors',
        'PySide6.QtSerialPort',
        'PySide6.QtSql',
        'PySide6.QtTest',
        'PySide6.QtTextToSpeech',
        'PySide6.QtWebChannel',
        'PySide6.QtWebEngine',
        'PySide6.QtWebEngineCore',
        'PySide6.QtWebEngineWidgets',
        'PySide6.QtWebSockets',
        'PySide6.QtXml',
        'PySide6.QtXmlPatterns',
        'lightning',
        'lightning_fabric',
        'lightning.pytorch',
        'lightning.pytorch.core',
        'lightning.pytorch.utilities',
        'librosa',
        'numpy',
        'scipy',
        'soundfile',
        'pydub',
        'ffmpeg',
        'pyannote.audio',
        'pyannote.pipeline',
        'pyannote.audio.core.pipeline',
        'pyannote.audio.core.model',
        'pyannote.audio.core.io',
        'pyannote.audio.pipelines.voice_activity_detection',
        'pyannote.audio.pipelines.speaker_diarization',
        'pyannote.audio.models',
        'pyannote.audio.utils',
        'pyannote.audio.tasks.segmentation.voice_activity_detection',
        'pyannote.audio.tasks.segmentation.speaker_diarization',
        'pyannote.audio.tasks.segmentation.overlapped_speech_detection',
        'pyannote.audio.tasks.embedding',
        'pyannote.audio.tasks.separation',
        'pyannote.audio.torchmetrics',
        'pyannote.audio.torchmetrics.audio',
        'pyannote.audio.torchmetrics.functional',
        'pyannote.audio.torchmetrics.classification',
        'pyannote.audio.torchmetrics.regression',
        'pyannote.audio.torchmetrics.clustering',
        'pyannote.audio.torchmetrics.embedding',
        'pyannote.audio.torchmetrics.segmentation',
        'pyannote.audio.torchmetrics.separation',
        'pyannote.core',
        'pyannote.core.utils',
        'pyannote.core.utils.helper',
        'pyannote.core.feature',
        'pyannote.database',
        'pyannote.database.protocol',
        'pyannote.database.protocol.speaker_diarization',
        'pyannote.database.protocol.segmentation',
        'pyannote.pipeline',
        'pyannote.pipeline.experiment',
        'transformers',
        'sentencepiece',
        'protobuf',
        'tqdm',
        'requests',
        'urllib3',
        'certifi',
        'charset_normalizer',
        'idna',
    ],
    hookspath=['tools/hooks'],
    hooksconfig={},
    runtime_hooks=['tools/hooks/runtime_hook.py'],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='Magic_Time_Studio',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=True,  # Console aan voor debugging
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='assets/Magic_Time_Studio.ico'
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='Magic_Time_Studio'
)
